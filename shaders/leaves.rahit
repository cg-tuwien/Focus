#version 460
#extension GL_NV_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require

struct RayTracingHit {
	vec4 color;
	vec4 transparentColor[2];
	float transparentDist[4];	//0 = goal, 1 = character
	uvec4 various;		//x = goal, y = recursions, z = renderCharacter
};

struct MaterialGpuData
{
	vec4 mDiffuseReflectivity;
	vec4 mAmbientReflectivity;
	vec4 mSpecularReflectivity;
	vec4 mEmissiveColor;
	vec4 mTransparentColor;
	vec4 mReflectiveColor;
	vec4 mAlbedo;

	float mOpacity;
	float mBumpScaling;
	float mShininess;
	float mShininessStrength;
	
	float mRefractionIndex;
	float mReflectivity;
	float mMetallic;
	float mSmoothness;
	
	float mSheen;
	float mThickness;
	float mRoughness;
	float mAnisotropy;
	
	vec4 mAnisotropyRotation;
	vec4 mCustomData;
	
	int mDiffuseTexIndex;
	int mSpecularTexIndex;
	int mAmbientTexIndex;
	int mEmissiveTexIndex;
	int mHeightTexIndex;
	int mNormalsTexIndex;
	int mShininessTexIndex;
	int mOpacityTexIndex;
	int mDisplacementTexIndex;
	int mReflectionTexIndex;
	int mLightmapTexIndex;
	int mExtraTexIndex;
	
	vec4 mDiffuseTexOffsetTiling;
	vec4 mSpecularTexOffsetTiling;
	vec4 mAmbientTexOffsetTiling;
	vec4 mEmissiveTexOffsetTiling;
	vec4 mHeightTexOffsetTiling;
	vec4 mNormalsTexOffsetTiling;
	vec4 mShininessTexOffsetTiling;
	vec4 mOpacityTexOffsetTiling;
	vec4 mDisplacementTexOffsetTiling;
	vec4 mReflectionTexOffsetTiling;
	vec4 mLightmapTexOffsetTiling;
	vec4 mExtraTexOffsetTiling;
};

struct ModelInstanceGpuData {
	uint mMaterialIndex;
	mat4 mNormalMat;
	uint mFlags;
};

layout(set = 0, binding = 0) buffer InstanceBuffer {
	ModelInstanceGpuData instances[];
} instanceSsbo;
layout(set = 0, binding = 1) buffer Material 
{
	MaterialGpuData materials[];
} matSsbo;

layout(set = 0, binding = 3) uniform sampler2D textures[];
layout(set = 6, binding = 0) uniform usamplerBuffer indexBuffers[];
layout(set = 0, binding = 5) uniform samplerBuffer texCoordBuffers[];

rayPayloadInNV RayTracingHit hitValue;

hitAttributeNV vec3 attribs;

void main()
{
    const vec3 barycentrics = vec3(1.0 - attribs.x - attribs.y, attribs.x, attribs.y);
	const int instanceIndex = nonuniformEXT(gl_InstanceCustomIndexNV);
	uint materialIndex = instanceSsbo.instances[instanceIndex].mMaterialIndex;
	
	mat3 normalMat = mat3(instanceSsbo.instances[instanceIndex].mNormalMat);
	const ivec3 indices = ivec3(texelFetch(indexBuffers[instanceIndex], gl_PrimitiveID).rgb);
	const vec2 uv0 = texelFetch(texCoordBuffers[instanceIndex], indices.x).rg;
	const vec2 uv1 = texelFetch(texCoordBuffers[instanceIndex], indices.y).rg;
	const vec2 uv2 = texelFetch(texCoordBuffers[instanceIndex], indices.z).rg;
	const vec2 uv = (barycentrics.x * uv0 + barycentrics.y * uv1 + barycentrics.z * uv2);
	int textureIdx = matSsbo.materials[materialIndex].mDiffuseTexIndex;
	vec4 tex = texture(textures[textureIdx], uv);
	if (tex.a <= 0.1) {
		ignoreIntersectionNV();
	} else {
		hitValue.color.rgb = tex.rgb;
	}
	
}